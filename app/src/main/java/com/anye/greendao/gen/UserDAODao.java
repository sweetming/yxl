package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lenovo.entity.UserDAO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DAO".
*/
public class UserDAODao extends AbstractDao<UserDAO, Long> {

    public static final String TABLENAME = "USER_DAO";

    /**
     * Properties of entity UserDAO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Daohttps = new Property(1, String.class, "daohttps", false, "DAOHTTPS");
        public final static Property Daoimgs = new Property(2, String.class, "daoimgs", false, "DAOIMGS");
        public final static Property Daotitles = new Property(3, String.class, "daotitles", false, "DAOTITLES");
        public final static Property Daolooker = new Property(4, String.class, "daolooker", false, "DAOLOOKER");
        public final static Property Daocreater = new Property(5, String.class, "daocreater", false, "DAOCREATER");
    };


    public UserDAODao(DaoConfig config) {
        super(config);
    }
    
    public UserDAODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DAOHTTPS\" TEXT," + // 1: daohttps
                "\"DAOIMGS\" TEXT," + // 2: daoimgs
                "\"DAOTITLES\" TEXT," + // 3: daotitles
                "\"DAOLOOKER\" TEXT," + // 4: daolooker
                "\"DAOCREATER\" TEXT);"); // 5: daocreater
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDAO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String daohttps = entity.getDaohttps();
        if (daohttps != null) {
            stmt.bindString(2, daohttps);
        }
 
        String daoimgs = entity.getDaoimgs();
        if (daoimgs != null) {
            stmt.bindString(3, daoimgs);
        }
 
        String daotitles = entity.getDaotitles();
        if (daotitles != null) {
            stmt.bindString(4, daotitles);
        }
 
        String daolooker = entity.getDaolooker();
        if (daolooker != null) {
            stmt.bindString(5, daolooker);
        }
 
        String daocreater = entity.getDaocreater();
        if (daocreater != null) {
            stmt.bindString(6, daocreater);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDAO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String daohttps = entity.getDaohttps();
        if (daohttps != null) {
            stmt.bindString(2, daohttps);
        }
 
        String daoimgs = entity.getDaoimgs();
        if (daoimgs != null) {
            stmt.bindString(3, daoimgs);
        }
 
        String daotitles = entity.getDaotitles();
        if (daotitles != null) {
            stmt.bindString(4, daotitles);
        }
 
        String daolooker = entity.getDaolooker();
        if (daolooker != null) {
            stmt.bindString(5, daolooker);
        }
 
        String daocreater = entity.getDaocreater();
        if (daocreater != null) {
            stmt.bindString(6, daocreater);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDAO readEntity(Cursor cursor, int offset) {
        UserDAO entity = new UserDAO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // daohttps
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // daoimgs
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // daotitles
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // daolooker
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // daocreater
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDAO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDaohttps(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDaoimgs(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDaotitles(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDaolooker(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDaocreater(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDAO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDAO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
